pipeline {
    agent any

    environment {
        S3_BUCKET = 'my-s3-bucket-for-jenkins-pipeline-setup'
        S3_KEY = 'my-app.zip'
        ENVIRONMENT_NAME = 'Linux-based-web-application-env'
        APPLICATION_NAME = 'linux-based-web-application'
        AWS_REGION = 'us-east-1'
        SECRET_NAME = 'secret-jenkins-access'
        VERSION_LABEL = "app-version-${BUILD_NUMBER}"
    }

    stages {
        stage('Retrieve AWS Credentials from Secrets Manager') {
            steps {
                script {
                    def secretValue = sh(script: "aws secretsmanager get-secret-value --secret-id ${SECRET_NAME} --query 'SecretString' --output text --region ${AWS_REGION}", returnStdout: true).trim()
                    def jsonSlurper = new groovy.json.JsonSlurper()
                    def credentials = jsonSlurper.parseText(secretValue)
                    env.AWS_ACCESS_KEY_ID = credentials.keySet().iterator().next()
                    env.AWS_SECRET_ACCESS_KEY = credentials[env.AWS_ACCESS_KEY_ID]
                }
            }
        }

        stage('Install Ansible Collections') {
            steps {
                sh "ansible-galaxy collection install community.aws"
            }
        }

        stage('Checkout Repository') {
            steps {
                git url: 'https://github.com/ManojKamatam/Ansible_Integration_for_Existing_Env_Changes.git', branch: 'main'
            }
        }

        stage('Trigger Ansible Playbook for Configuration Updates') {
            steps {
                withEnv(["AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}", "AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}", "AWS_REGION=${AWS_REGION}"]) {
                    sh """
                        ansible-playbook -i localhost, ansible/configure_beanstalk_env.yml \
                        --extra-vars "application_name=${APPLICATION_NAME} environment_name=${ENVIRONMENT_NAME} region=${AWS_REGION}"
                    """
                }
            }
        }
    }

    post {
    success {
        echo 'Deployment process completed successfully.'
    }
    failure {
        echo 'Deployment process failed. Please check the logs for more details.'
    }
  }
}

